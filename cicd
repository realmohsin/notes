what are github actions?
A workflow automation service by github, automate all kinds of repository-related processes and actions.
github actions most important in automatcing the processes involved in code deployment.
proper modern code deployment is achieved through CI/CD or continuous integration and continuous delivery.

continuous integration - code changes automatically built, tested and merged with existing code.
continuous delivery - publishing new versions of an app or package after new code integration

github actions can also help with automating code & repository management

workflows, jobs, steps

You can add workflows to github repositories. Workflows include one or more jobs. Jobs contain one or more steps that will be executed in the order they are specified. 

workflows are triggered upon events - for example on manual trigger or when a commit is pushed to a certain branch.

jobs define a runner. a runner is the execution environment -  the machine and operating system that will be used for executing steps. These runners can be runners predefined by github or you can configure your own runners. 

Jobs run in parallel by default but can be configured to run in sequential order. You can also run conditional jobs.

A step can be a shell script or an Action. Actions are predefined scripts that perform a certain task. Can use custom or third-party actions.

A job must have at least one step. Steps are executed in sequential order. Steps can be conditional.

 
Events
workflow_dispatch - manually trigger workflow
repository_dispatch - REST Api request triggers workflow
schedule - workflow is scheduled
workflow_call - can be called by other workflows

Check documentation for full list of events and how to use them

Workflows don't execute in the repository context by default. You have to fetch the code.

Action - A custom application that performs a typically complex frequently repeated task. 
Alternative to Actions is using the 'run' command to execute shell command that's defined by you

There are actions created by the community and are open source that you can use. There are also actions created and maintained by github, like 'checkout' which is an action for checking out a repo. 

The ubuntu-latest runner has nodejs installed by default. 

Use 'needs' keyword in yaml for sequential jobs - to tell a job what other job needs to finish first.

You can access metadata that's passed into jobs and steps. This metadata is collectively named context. github actions creates some context data with various pieces of information about the event trigger, and the runner and other things that can be accessed from steps. You have to use an expression syntax - ${{}} to access context objects.