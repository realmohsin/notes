# Git Installation on Ubuntu 22.04.5

1. Check if Git is installed or not using `git --version`.
2. Install Git using `sudo apt install git-all`. 
3. Set name using `git config --global user.name "Real Mohsin"`
4. Set email using `git config --global user.email "real@realmohsin.com"`
5. Install Visual Studio Code, then set editor using `git config --global core.editor "code --wait"`
6. Verify settings are set and check where they are coming from using `git config --list --show-origin`.

# What is Git?
Git is a Distributed Version Control System, where clients don't just check out the latest snapshot of files, but rather they fully mirror the repository, including its FULL history. Thus if any server dies, any of the client repositories can be copied back up to the server to restore it. Every clone is really a full backup of all the data.

# .git/ directory contents 
- HEAD - points to the branch you currently have checked out
- index - where Git stores your staging area information
- config file - contains project specific git configuration variables
- description - used by the GitWeb program
- info/ - keeps gloabl exclude file for ignored patterns you dont want to track in a .gitignore file
- hooks/ - contains client- or server-side hook scripts
- objects/ - stores all the content for your database
- refs/ - stores pointers into commit objects (in objects/) (to represent branches, tags, remotes and more)

# Notes about the internals of Git

The core of Git is a simple key-value data store.

# Blob Objects
Each version of every file is stored as a blob object. The blob is referenced by the hash of its contents. In the data store analogy, the 'key' is the SHA-1 hash of the content, and the value is the content itself. More practically, the blob files are named using the hash of the contents, and each blob file in .git/objects/ represents a version of a file.

# Tree Objects
A tree in .git/objects/, representing a version of a directory, is a file listing the real file names that constitute that directory and the corresponding hashes that represent those files in the objects/ directory. 

Sample tree file:
100644 blob ca35a4cae90ebfce16d872449fc7998f080a4f11    hellogit.txt
100644 blob 3b18e512dba79e4c8300dd08aeb37f8e728b8dad    helloworld.txt
100644 blob 3b18e512dba79e4c8300dd08aeb37f8e728b8dad    nofile.txt

From the perspective of .git folder, a file or directory's real name is only known from the tree file where its referenced. 

## Commit Objects
Example of commit file:
tree bcd72ed0fdb0adc541578741b5c9b240321da099
parent 068c4f5cdf5167c818fc069ead73b7c1c8f32ead
author Real Mohsin <real@realmohsin.com> 1705864327 -0500
committer Real Mohsin <real@realmohsin.com> 1705864327 -0500

Second commit

Commit's will always reference the top level nameless tree that represents the root working directory.


## Summary
Files are stored as blobs, and directories are stored as trees in the objects/ database folder. They are both stored and referenced by the hash of their contents. EACH version of a new file commited will generate a new saved file in the objects/ folder. If a file is changed and committed 10 times, there will be 10 files in objects/ folder, each representing a version of that same file. If a file is not changed when a commit happens, that file's saved file in objects/ remains the same and is still pointed to by the latest commit. 