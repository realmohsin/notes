# Visual Studio Code Installation on Ubuntu 22.04.4

1. Go to https://code.visualstudio.com. Download the .deb file. 
2. Open terminal and cd into ~/Downloads. Install using `sudo apt install ./file.deb`. Accept the prompt to install the apt repository and signing key.
3. Open vscode by using command `code` in terminal.
4. Log in Accounts (from bottom left) > Backup and Sync Settings... > Sign In > Sign in with GitHub.
5. On 'Get Started with VS Code' page click 'Set Up Copilot for Free'. Click 'Use Copilot for Free' from right panel. This should install two extensions - 'GitHub Copilot Chat' and 'GitHub Copilot'. 'GitHub Copilot' provides inline coding suggestions as you type. 'GitHub Copilot Chat' provides conversational AI assistance. Make sure the 'Toggle Chat' button (next to Search bar at the top of VS Code UI) opens the right side Copilot chat panel.
6. Open a repository and in a file make sure you can use 'CTRL + I' to open inline copilot chat. (Inline copilot chat will write out the suggested code in the file for you, whereas right side copilot chat panel give you the snipper instead.)
7. Install 'Prettier - Code formatter' extension. 
8. Go to Settings, from top right options, open settings.json. Add following settings:
{
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.formatOnSave": true
}
9. Go to Keyboard Shortcuts, search for 'format'. Change "Format Document" shortcut to 'shift + alt + f'. 
10. Install the 'ESLint' extension that is authored by Microsoft.


Install the following extensions (if not there)
- GitHub Copilot
- GitHub Copilot Chat
- LiveServer
- Prettier - Code formatter
- ESLint



## jsconfig.json

The presence of jsconfig.json file in a directory indicates that the directory is the root of a JavaScript Project.

jsconfig.json defines the project context. 


 jk
Mainly used by editors for proper IntelliSense. Use the 'exclude' and/or 'include' options to set what files should be considered as part of your source code. You will want to exclude files generated by a build process (such as a dist/ folder). If IntelliSense is slow,  you can try things like excluding node_modules/. 

If you do not have a jsconfig.json in your workspace, VS Code will by default exclude the node_modules folder.

jsconfig is inspired from tsconfig, that's why it has 'compilerOptions' even though javascript doesn't need to be compiled, it's misleading.

jsconfig.json structure:
```javascript
{
  "include": [],
  "exclude": [],
  "compilerOptions": {
    //...
  }
}
```

Come back and fill this in from https://code.visualstudio.com/docs/languages/jsconfig when learning typescript. basically ever since typescript had a tsconfig.json, editors liked it and created jsconfig.json for raw javascript projects. unfortunately the misleading 'compilerOptions' is used for jsconfig.json.

Some example jsconfig.json found on the net:
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "resources/js/*"
      ],
      "@Components/*": [
        "resources/js/Components/*"
      ]
    }
  },
  "exclude": [
    "node_modules",
    "public"
  ]
}
above indicates shortcuts using @, need to be defined in webpack config as well





